
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	SerialPort.asm
	Object File:	SerialPort.hex
	List File:	SerialPort.lst



 Line  I  Addr  Code            Source

    1:				; Title: Serial Port
    2:				; Description:
    3:				;
    4:				; Author: Cody Somers, 11271716
    5:				; Date Created: Nov 19, 2022
    6:				; Last Edited: Nov 19, 2022
    7:				; Due Date: Nov 29, 2022
    8:				; Microcontroller: 8051 with Paulmon
    9:				; Variables:
   10:				;   Inputs:
   11:				;   Outputs:
   12:
   13:				;---------Initialize Board----------
   14:		N      8000	locat  EQU 8000h                ;Location for this program
   15:		N      8000	ORG    locat
   16:
   17:	  8000	A5 E5 E0 A5	DB     0A5h,0E5h,0E0h,0A5h      ;signature bytes
   18:	  8004	23 FF 00 00	DB     35,255,0,0               ;id (35=prog)
   19:	  8008	00 00 00 00	DB     0,0,0,0                  ;prompt code vector
   20:	  800C	00 00 00 00	DB     0,0,0,0                  ;reserved
   21:	  8010	00 00 00 00	DB     0,0,0,0                  ;reserved
   22:	  8014	00 00 00 00	DB     0,0,0,0                  ;reserved
   23:	  8018	00 00 00 00	DB     0,0,0,0                  ;user defined
   24:	  801C	FF FF FF FF	DB     255,255,255,255          ;length and checksum (255=unused)
   25:	  8020	41 73 73 69	DB     "Assignment4",0	      ;max 31 characters, plus the zero
	  8024	67 6E 6D 65
	  8028	6E 74 34 00
   26:
   27:				; Pins on board
   28:		N      F800	port_a EQU 0F800h           ; Location of port A
   29:		N      F801	port_b EQU 0F801h           ; Location of port B
   30:		N      F803	port_abc_pgm EQU 0F803h     ; Configuration byte for ports A,B,C
   31:
   32:				; LCD commands
   33:		N      FE00	lcd_command_wr EQU 0FE00h   ; Write only
   34:		N      FE01	lcd_status_rd EQU 0FE01h    ; Read only
   35:		N      FE02	lcd_data_wr EQU 0FE02h      ; Write only
   36:		N      FE03	lcd_data_rd EQU 0FE03h      ; Read only
   37:
   38:				; Serial I/O
   39:		N      0030	cout EQU 30h
   40:		N      0032	cin EQU 32h
   41:		N      003E	esc EQU 3Eh

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   42:
   43:
   44:		N      8040	ORG    locat+64             ; executable code begins here
   45:
   46:				;-----------Configure Ports----------
   47:	  8040	90 F8 03	MOV DPTR, #port_abc_pgm     ; Configuration byte for ports A,B,C
   48:	  8043	74 80		MOV A, #128
   49:	  8045	F0		MOVX @DPTR, A
   50:
   51:				;--------Initialize LCD Screen--------
   52:				; Description: These steps follow the timing guide.
   53:				;   We power on, wait for 15ms.
   54:				;   Set the function in 8bit mode
   55:				;   Wait again for 4.1ms
   56:				;   Set the function in 8bit mode
   57:				;   Wait again for 100us
   58:				;   Set the function in 8bit mode one final time. Then the BF can be checked and
   59:				;   the rest of the initialization process can happen:
   60:				;     This involves setting it to 4bit mode, then clearing display etc.
   61:				; Variables: Uses A and DPTR
   62:				;   Input: None
   63:				;   Output: Initialize the board into 4 bit mode
   64:
   65:	  8046			initialize_LCD:
   66:				; Wait for 15ms
   67:	  8046	11 DA		ACALL init_delay_sequence
   68:	  8048	11 DA		ACALL init_delay_sequence
   69:	  804A	11 DA		ACALL init_delay_sequence
   70:	  804C	11 DA		ACALL init_delay_sequence
   71:
   72:				; Function Set Command (8-bit interface)
   73:	  804E	90 FE 00	MOV DPTR, #lcd_command_wr
   74:	  8051	74 30		MOV A, #30h                 ; Necessary value that sets DB5,4 to high
   75:	  8053	F0		MOVX @DPTR, A
   76:
   77:				; Wait 4.2ms
   78:	  8054	11 DA		ACALL init_delay_sequence
   79:
   80:				; Function Set Command (8-bit interface)
   81:	  8056	90 FE 00	MOV DPTR, #lcd_command_wr
   82:	  8059	74 30		MOV A, #30h                 ; Necessary value that sets DB5,4 to high
   83:	  805B	F0		MOVX @DPTR, A
   84:
   85:				; Wait 4.2ms (Only 100us necessary)
   86:	  805C	11 DA		ACALL init_delay_sequence
   87:
   88:				; Function Set Command (8-bit interface)
   89:	  805E	90 FE 00	MOV DPTR, #lcd_command_wr
   90:	  8061	74 30		MOV A, #30h                 ; Necessary value that sets DB5,4 to high
   91:	  8063	F0		MOVX @DPTR, A
   92:
   93:				; Wait 4.2ms (Might not be necessary)
   94:	  8064	11 DA		ACALL init_delay_sequence
   95:
   96:				; Set into 4-bit mode
   97:	  8066	90 FE 00	MOV DPTR, #lcd_command_wr

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   98:	  8069	74 20		MOV A, #20h                 ; Sets it to 4-bit mode
   99:	  806B	F0		MOVX @DPTR, A
  100:
  101:				;-------Set initial parameters-------
  102:				; Description: The board is now initialized and the rest of the board is set
  103:				;   This puts it in 4-bit mode and 2 line display, cursor and blink disabled,
  104:				;   shift mode to right cursor shift(might not be used) initial address to write
  105:				;   which is first line of display, then entry mode(might not be used) so that cursor
  106:				;   moves right.
  107:				; Variables: Uses A and DPTR
  108:				;   Input: None
  109:				;   Output: Completes initialization of LCD
  110:
  111:				; Set the rest of the stuff. Everything from this point on will be required to send or receive data
				twice.
  112:	  806C	11 DA		ACALL init_delay_sequence   ; Wait 4.2ms
  113:	  806E	74 28		MOV A, #28h                 ; Sets it to 4-bit mode and 2 line display
  114:	  8070	11 B7		ACALL lcd_command           ; lcd_command is in 4-bit mode and only works as such
  115:
  116:				; Clear the display
  117:	  8072	11 C0		ACALL clear_disp
  118:
  119:				; Turn on display, with cursor and blinking cursor enabled
  120:	  8074	74 0F		MOV A, #0Fh                 ; Set this back to 0Fh. Set to 0Ch to turn off
  121:	  8076	11 B7		ACALL lcd_command
  122:
  123:				; Set shift mode to right cursor shift
  124:	  8078	74 10		MOV A, #10h                 ; Set to 14 or 10. Seems to have no difference
  125:	  807A	11 B7		ACALL lcd_command
  126:
  127:				; Set display buffer RAM address. This sets the cursor to the beginning of the first line.
  128:	  807C	74 80		MOV A, #80h                 ; Set to 80
  129:	  807E	11 B7		ACALL lcd_command
  130:
  131:				; Set entry mode so that cursor moves to the right but display not shifted
  132:	  8080	74 06		MOV A, #06h                 ; Set to 06
  133:	  8082	11 B7		ACALL lcd_command
  134:
  135:
  136:				;-------Start of Main Program--------
  137:				; Description: This calls all the required subroutines in an infinite loop
  138:				;   that prints all the values to the screen in the required timings
  139:				; Variables: Uses A
  140:				;   Input: None
  141:				;   Output: Output on the LCD display
  142:
  143:	  8084	7B 14		MOV R3, #20
  144:	  8086	7C 02		MOV R4, #2
  145:	  8088			infinite_loop:
  146:
  147:	  8088	11 93		  ACALL user_input
  148:				  ; For some reason this needed to be outside of the subroutine call. idk why
  149:	  808A	B4 1B 02	  CJNE A, #1Bh, escape_not_pressed
  150:	  808D	21 22		  AJMP theend
  151:	  808F			  escape_not_pressed:
  152:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  153:	  808F	80 F7		SJMP infinite_loop
  154:
  155:	  8091	21 22		AJMP theend                 ; Never reached, but will exit the program. (debugging)
  156:
  157:				;--------End of Main Program----------
  158:
  159:				;-----------Subroutines------------
  160:
  161:				;-----Check X-Y Position-----
  162:				; So for this I think I'm just going to have a register that counts up from 1 to 20
  163:				; Then when it reaches the max it switches the values to either #80h or #0C0h
  164:				; depending on if we want the first or the second line. This will use two registers
  165:				; It uses registers r3 and r4, which means these registers can not be used by anything else
  166:				; otherwise the count is disrupted. Could also store in b.
  167:
  168:				; This will return outside the same value put into the accumulator as the user typed
  169:	  8093			user_input:
  170:	  8093	12 00 32	  LCALL cin
  171:	  8096	11 CA		  ACALL busy_check
  172:	  8098	90 FE 02	  MOV DPTR, #lcd_data_wr
  173:	  809B	F0		  MOVX @DPTR, A
  174:	  809C	C4		  SWAP A
  175:	  809D	F0		  MOVX @DPTR, A
  176:	  809E	C4		  SWAP A ; This second swap here is so that the ACC value is the right way around again
  177:	  809F	C0 E0		  PUSH ACC
  178:	  80A1	11 A6		  ACALL check_cursor_position
  179:	  80A3	D0 E0		  POP ACC
  180:	  80A5	22		RET
  181:
  182:	  80A6			check_cursor_position:
  183:	  80A6	DB 0E		  DJNZ R3, x_good
  184:	  80A8	7B 14		  MOV R3, #20   ; 20 characters on a line
  185:
  186:	  80AA	74 C0		  MOV A, #0C0h                 ; Set to second line
  187:	  80AC	11 B7		  ACALL lcd_command
  188:
  189:	  80AE	DC 06		  DJNZ R4, y_good
  190:	  80B0	7C 02		  MOV R4, #2    ; 2 lines of characters
  191:
  192:	  80B2	74 80		  MOV A, #80h                 ; Set to first line
  193:	  80B4	11 B7		  ACALL lcd_command
  194:
  195:	  80B6			  x_good:
  196:	  80B6			  y_good:
  197:	  80B6	22		RET
  198:
  199:
  200:				;-----LCD Command-----
  201:				; Description: This is the 4 bit action the performs a write to the command
  202:				;   register. Saves space for repetition.
  203:				; Variables: Uses A and DPTR
  204:				;   Input: The value of A needs to be set before calling this subroutine
  205:				;   Output: Puts the command given in A to the command write
  206:	  80B7			lcd_command:
  207:	  80B7	11 CA		  ACALL busy_check          ; Checks if busy
  208:	  80B9	90 FE 00	  MOV DPTR, #lcd_command_wr ; Moves to command_wr

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  209:	  80BC	F0		  MOVX @DPTR, A             ; First four bits (high bits 7-4)
  210:	  80BD	C4		  SWAP A                    ; Swap
  211:	  80BE	F0		  MOVX @DPTR, A             ; Second four bits (low bits 3-0)
  212:	  80BF	22		RET
  213:
  214:				;-----Clear Display-----
  215:				; Description: A specific command that sets A to the appropriate value for clearing
  216:				;   the display.
  217:				; Variables: Uses A
  218:				;   Input: None
  219:				;   Output: Clears the display on the board
  220:	  80C0			clear_disp:
  221:	  80C0	74 01		  MOV A, #01h               ; Command for clear
  222:	  80C2	11 B7		  ACALL lcd_command         ; Perform action
  223:	  80C4	22		RET
  224:
  225:				;-----Move Cursor Home-----
  226:				; Description: Returns the position of the screen to its original position
  227:				; Variables: Uses A
  228:				;   Input: None
  229:				;   Output: Returns screen position to home
  230:				; Move the cursor to the home position
  231:	  80C5			move_cursor_home:
  232:	  80C5	74 02		  MOV A, #02h               ; Move cursor to home position
  233:	  80C7	11 B7		  ACALL lcd_command
  234:	  80C9	22		RET
  235:
  236:				;-----Busy Check-----
  237:				; Description: Checks the busy flag and only allows the program to continue if
  238:				;   the busy flag is not set.
  239:				; Variables: Uses A
  240:				;   Input: None
  241:				;   Output: Time delay
  242:	  80CA			busy_check:
  243:	  80CA	C0 E0		  PUSH ACC                  ; Store value in A
  244:	  80CC	90 FE 01	  MOV DPTR, #lcd_status_rd  ; Move to status register
  245:	  80CF			  busy_wait:
  246:	  80CF	E0		    MOVX A, @DPTR           ; First 4 bits
  247:	  80D0	30 E7 03	    JNB acc.7, busy_go      ; If the data bit is not set, program is clear to return (busy_go)
  248:	  80D3	E0		    MOVX A, @DPTR           ; Second 4 bits. Not read but necessary for completeness
  249:	  80D4	80 F9		    SJMP busy_wait          ; Loop while busy flag is set
  250:	  80D6			  busy_go:
  251:	  80D6	E0		    MOVX A, @DPTR           ; Second 4 bits. Ignored
  252:	  80D7	D0 E0		    POP ACC                 ; Return value in A
  253:	  80D9	22		RET
  254:
  255:				;---------Delay Timers---------
  256:				; Description:The timers all function the same, they just have a different duration.
  257:				;   For every full decrement of the first register, the second (or third) register
  258:				;   will only decrement once. Since the DJNZ takes two clock cycles, the total number
  259:				;   of clock cycles taken by a timer can be found by 2*R0*R1, with each clock
  260:				;   cycle being roughly 0.5us
  261:				; Variables: Makes use of R0, R1 and R2
  262:				;   Inputs: None
  263:				;   Outputs: Time delay
  264:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  265:				; A timer used for the initialization phase
  266:	  80DA			init_delay_sequence:
  267:				  ; Wait for 4.3ms
  268:	  80DA	78 2D		  MOV R0, #45               ; Divided by 2
  269:	  80DC	79 5A		  MOV R1, #90
  270:	  80DE			  init_delay:               ; Set for a 4.3ms delay
  271:	  80DE	D8 FE		    DJNZ R0, init_delay
  272:	  80E0	78 2D		    MOV R0, #45
  273:	  80E2	D9 FA		    DJNZ R1, init_delay
  274:	  80E4	22		RET
  275:
  276:				; A timer for the blinking left, right portion
  277:	  80E5			timer_delay:
  278:				  ; Wait for 137ms
  279:	  80E5	78 79		  MOV R0, #121              ; Divided by 2
  280:	  80E7	79 3A		  MOV R1, #58
  281:	  80E9	7A 12		  MOV R2, #18
  282:	  80EB			  delay_timer:              ; Set for a 137ms delay
  283:	  80EB	D8 FE		    DJNZ R0, delay_timer
  284:	  80ED	78 79		    MOV R0, #121
  285:	  80EF	D9 FA		    DJNZ R1, delay_timer
  286:	  80F1	79 3A		    MOV R1, #58
  287:	  80F3	DA F6		    DJNZ R2, delay_timer
  288:	  80F5	22		RET
  289:
  290:				; A timer for holding in the centre
  291:	  80F6			timer_delay2:
  292:				  ; Wait for 3.4s
  293:	  80F6	78 58		  MOV R0, #88               ; Divided by 2
  294:	  80F8	79 B2		  MOV R1, #178
  295:	  80FA	7A C8		  MOV R2, #200
  296:	  80FC			  delay_timer2:             ; Set for a 3.4s delay
  297:	  80FC	D8 FE		    DJNZ R0, delay_timer2
  298:	  80FE	78 58		    MOV R0, #88
  299:	  8100	D9 FA		    DJNZ R1, delay_timer2
  300:	  8102	79 B2		    MOV R1, #178
  301:	  8104	DA F6		    DJNZ R2, delay_timer2
  302:	  8106	22		RET
  303:
  304:				; A timer that changes how quickly the names shift across the screen.
  305:	  8107			ticker_tape:
  306:				  ; Wait for however long/short you want that looks good
  307:	  8107	78 4B		  MOV R0, #75
  308:	  8109	79 4B		  MOV R1, #75
  309:	  810B	7A 4B		  MOV R2, #75
  310:	  810D			  delay_ticker:
  311:	  810D	D8 FE		    DJNZ R0, delay_ticker
  312:	  810F	78 4B		    MOV R0, #75
  313:	  8111	D9 FA		    DJNZ R1, delay_ticker
  314:	  8113	79 4B		    MOV R1, #75
  315:	  8115	DA F6		    DJNZ R2, delay_ticker
  316:	  8117	22		RET
  317:
  318:				;--------Useless Stuff for Later Reference----------
  319:				; Print the letter C
  320:	  8118	11 CA		ACALL busy_check

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  321:	  811A	90 FE 02	MOV DPTR, #lcd_data_wr
  322:	  811D	74 43		MOV A, #43h ; Print the letter
  323:	  811F	F0		MOVX @DPTR, A
  324:	  8120	C4		SWAP A
  325:	  8121	F0		MOVX @DPTR, A
  326:
  327:	  8122			theend:
  328:				END                         ; End of program.





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
BUSY_CHECK			  CODE	    80CA	 242
BUSY_GO				  CODE	    80D6	 250
BUSY_WAIT			  CODE	    80CF	 245
CHECK_CURSOR_POSITION		  CODE	    80A6	 182
CIN				  NUMBER    0032	  40
CLEAR_DISP			  CODE	    80C0	 220
COUT				  NUMBER    0030	  39
CY				  BIT	      D7
DELAY_TICKER			  CODE	    810D	 310
DELAY_TIMER			  CODE	    80EB	 282
DELAY_TIMER2			  CODE	    80FC	 296
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ESC				  NUMBER    003E	  41
ESCAPE_NOT_PRESSED		  CODE	    808F	 151
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INFINITE_LOOP			  CODE	    8088	 145
INITIALIZE_LCD			  CODE	    8046	  65
INIT_DELAY			  CODE	    80DE	 270
INIT_DELAY_SEQUENCE		  CODE	    80DA	 266
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LCD_COMMAND			  CODE	    80B7	 206
LCD_COMMAND_WR			  NUMBER    FE00	  33
LCD_DATA_RD			  NUMBER    FE03	  36
LCD_DATA_WR			  NUMBER    FE02	  35
LCD_STATUS_RD			  NUMBER    FE01	  34
LOCAT				  NUMBER    8000	  14
MOVE_CURSOR_HOME		  CODE	    80C5	 231
OV				  BIT	      D2
P				  BIT	      D0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PORT_A				  NUMBER    F800	  28
PORT_ABC_PGM			  NUMBER    F803	  30
PORT_B				  NUMBER    F801	  29
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
THEEND				  CODE	    8122	 327
TI				  BIT	      99
TICKER_TAPE			  CODE	    8107	 305
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TIMER_DELAY			  CODE	    80E5	 277
TIMER_DELAY2			  CODE	    80F6	 291
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
USER_INPUT			  CODE	    8093	 169
WR				  BIT	      B6
X_GOOD				  CODE	    80B6	 195
Y_GOOD				  CODE	    80B6	 196
