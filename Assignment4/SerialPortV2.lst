
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	SerialPortV2.asm
	Object File:	SerialPortV2.hex
	List File:	SerialPortV2.lst



 Line  I  Addr  Code            Source

    1:				; Title: Serial Port
    2:				; Description:
    3:				;
    4:				; Author: Cody Somers, 11271716
    5:				; Date Created: Nov 19, 2022
    6:				; Last Edited: Nov 19, 2022
    7:				; Due Date: Nov 29, 2022
    8:				; Microcontroller: 8051 with Paulmon
    9:				; Variables:
   10:				;   Inputs:
   11:				;   Outputs:
   12:
   13:				;---------Initialize Board----------
   14:		N      8000	locat  EQU 8000h                ;Location for this program
   15:		N      8000	ORG    locat
   16:
   17:	  8000	A5 E5 E0 A5	DB     0A5h,0E5h,0E0h,0A5h      ;signature bytes
   18:	  8004	23 FF 00 00	DB     35,255,0,0               ;id (35=prog)
   19:	  8008	00 00 00 00	DB     0,0,0,0                  ;prompt code vector
   20:	  800C	00 00 00 00	DB     0,0,0,0                  ;reserved
   21:	  8010	00 00 00 00	DB     0,0,0,0                  ;reserved
   22:	  8014	00 00 00 00	DB     0,0,0,0                  ;reserved
   23:	  8018	00 00 00 00	DB     0,0,0,0                  ;user defined
   24:	  801C	FF FF FF FF	DB     255,255,255,255          ;length and checksum (255=unused)
   25:	  8020	41 73 73 69	DB     "Assignment4V2",0	      ;max 31 characters, plus the zero
	  8024	67 6E 6D 65
	  8028	6E 74 34 56
	  802C	32 00
   26:
   27:				; Sometimes the button makes it where you can't type after it has been pressed
   28:				; Not sure what's up with that but yeah.
   29:		N      2003	extern_0  EQU 2003h            ; Location of External 0 ISR
   30:		N      2003	ORG    extern_0
   31:	  2003	12 80 FA	LCALL busy_check
   32:	  2006	12 80 F0	LCALL clear_disp
   33:				; This sets the initial registers for the length of the display lines.
   34:	  2009	7B 14		MOV R3, #20
   35:	  200B	7C 02		MOV R4, #2
   36:	  200D	32		RETI
   37:
   38:				; This can be deleted
   39:		N      201B	timer_1  EQU 201Bh            ; Location of Timer 1 ISR
   40:		N      201B	ORG    timer_1

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   41:				;LCALL LCD_Subroutine       ; Subroutine call to below the squarewave code
   42:	  201B	32		RETI
   43:
   44:		N      2023	RI_TI  EQU 2023h            ; Location of whatever ISR this is
   45:		N      2023	ORG    RI_TI
   46:	  2023	12 80 B5	LCALL LCD_Subroutine       ; Subroutine call to below the squarewave code
   47:	  2026	32		RETI
   48:
   49:		N      8040	ORG    locat+64             ; executable code begins here
   50:
   51:				; Pins on board
   52:		N      F800	port_a EQU 0F800h           ; Location of port A
   53:		N      F801	port_b EQU 0F801h           ; Location of port B
   54:		N      F803	port_abc_pgm EQU 0F803h     ; Configuration byte for ports A,B,C
   55:
   56:				; LCD commands
   57:		N      FE00	lcd_command_wr EQU 0FE00h   ; Write only
   58:		N      FE01	lcd_status_rd EQU 0FE01h    ; Read only
   59:		N      FE02	lcd_data_wr EQU 0FE02h      ; Write only
   60:		N      FE03	lcd_data_rd EQU 0FE03h      ; Read only
   61:
   62:				; Serial I/O
   63:		N      0030	cout EQU 30h
   64:		N      0032	cin EQU 32h
   65:		N      003E	esc EQU 3Eh
   66:
   67:				;-----------Configure Ports----------
   68:	  8040	90 F8 03	MOV DPTR, #port_abc_pgm     ; Configuration byte for ports A,B,C
   69:	  8043	74 80		MOV A, #128
   70:	  8045	F0		MOVX @DPTR, A
   71:
   72:				;----------Initialize the Pins------------
   73:				; This sets up the interrupt timer to use the 16 bit timer with internal control.
   74:				; Sets the high and low so that it is has a 27ms delay.
   75:	  8046	D2 AF		SETB IE.7                   ; Enable interrupt
   76:				;SETB IE.3                   ; Timer 1 interrupt enable
   77:	  8048	D2 AC		SETB IE.4                   ; Serial Port interrupt enable
   78:	  804A	D2 A8		SETB IE.0                   ; External Interrupt 0 interrupt enable
   79:				; The TMOD value needs to be changed when the second timer is enabled. To 21h.
   80:	  804C	75 89 20	MOV TMOD, #20h              ; Turns it into a 8 bit timer (auto-reload) for T1, with internal contro
				l
   81:	  804F	75 98 50	MOV SCON, #50h ; This sets the serial port to Mode 1. Set to 70h for multiprocessor
   82:	  8052	75 8D FA	MOV TH1, #250               ; Timer high. Set the timer to a
   83:	  8055	75 8B 00	MOV TL1, #00h
   84:	  8058	53 87 7F	ANL PCON, #7Fh ; This is just to ensure that the first bit is set to zero. Otherwise baud x2
   85:				; Still need to set up the priority level with IP here.
   86:	  805B	C2 99		CLR TI
   87:	  805D	C2 98		CLR RI
   88:	  805F	C2 B4		CLR T0 ; This turns it so that the second serial port will work
   89:	  8061	D2 8E		SETB TCON.6                 ; Turn Timer 1 on.
   90:
   91:				;--------Initialize LCD Screen--------
   92:				; Description: These steps follow the timing guide.
   93:				;   We power on, wait for 15ms.
   94:				;   Set the function in 8bit mode
   95:				;   Wait again for 4.1ms

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   96:				;   Set the function in 8bit mode
   97:				;   Wait again for 100us
   98:				;   Set the function in 8bit mode one final time. Then the BF can be checked and
   99:				;   the rest of the initialization process can happen:
  100:				;     This involves setting it to 4bit mode, then clearing display etc.
  101:				; Variables: Uses A and DPTR
  102:				;   Input: None
  103:				;   Output: Initialize the board into 4 bit mode
  104:
  105:	  8063			initialize_LCD:
  106:				; Wait for 15ms
  107:	  8063	31 0A		ACALL init_delay_sequence
  108:	  8065	31 0A		ACALL init_delay_sequence
  109:	  8067	31 0A		ACALL init_delay_sequence
  110:	  8069	31 0A		ACALL init_delay_sequence
  111:
  112:				; Function Set Command (8-bit interface)
  113:	  806B	90 FE 00	MOV DPTR, #lcd_command_wr
  114:	  806E	74 30		MOV A, #30h                 ; Necessary value that sets DB5,4 to high
  115:	  8070	F0		MOVX @DPTR, A
  116:
  117:				; Wait 4.2ms
  118:	  8071	31 0A		ACALL init_delay_sequence
  119:
  120:				; Function Set Command (8-bit interface)
  121:	  8073	90 FE 00	MOV DPTR, #lcd_command_wr
  122:	  8076	74 30		MOV A, #30h                 ; Necessary value that sets DB5,4 to high
  123:	  8078	F0		MOVX @DPTR, A
  124:
  125:				; Wait 4.2ms (Only 100us necessary)
  126:	  8079	31 0A		ACALL init_delay_sequence
  127:
  128:				; Function Set Command (8-bit interface)
  129:	  807B	90 FE 00	MOV DPTR, #lcd_command_wr
  130:	  807E	74 30		MOV A, #30h                 ; Necessary value that sets DB5,4 to high
  131:	  8080	F0		MOVX @DPTR, A
  132:
  133:				; Wait 4.2ms (Might not be necessary)
  134:	  8081	31 0A		ACALL init_delay_sequence
  135:
  136:				; Set into 4-bit mode
  137:	  8083	90 FE 00	MOV DPTR, #lcd_command_wr
  138:	  8086	74 20		MOV A, #20h                 ; Sets it to 4-bit mode
  139:	  8088	F0		MOVX @DPTR, A
  140:
  141:				;-------Set initial parameters-------
  142:				; Description: The board is now initialized and the rest of the board is set
  143:				;   This puts it in 4-bit mode and 2 line display, cursor and blink disabled,
  144:				;   shift mode to right cursor shift(might not be used) initial address to write
  145:				;   which is first line of display, then entry mode(might not be used) so that cursor
  146:				;   moves right.
  147:				; Variables: Uses A and DPTR
  148:				;   Input: None
  149:				;   Output: Completes initialization of LCD
  150:
  151:				; Set the rest of the stuff. Everything from this point on will be required to send or receive data

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

				twice.
  152:	  8089	31 0A		ACALL init_delay_sequence   ; Wait 4.2ms
  153:	  808B	74 28		MOV A, #28h                 ; Sets it to 4-bit mode and 2 line display
  154:	  808D	11 E7		ACALL lcd_command           ; lcd_command is in 4-bit mode and only works as such
  155:
  156:				; Clear the display
  157:	  808F	11 F0		ACALL clear_disp
  158:
  159:				; Turn on display, with cursor and blinking cursor enabled
  160:	  8091	74 0F		MOV A, #0Fh                 ; Set this back to 0Fh. Set to 0Ch to turn off
  161:	  8093	11 E7		ACALL lcd_command
  162:
  163:				; Set shift mode to right cursor shift
  164:	  8095	74 10		MOV A, #10h                 ; Set to 14 or 10. Seems to have no difference
  165:	  8097	11 E7		ACALL lcd_command
  166:
  167:				; Set display buffer RAM address. This sets the cursor to the beginning of the first line.
  168:	  8099	74 80		MOV A, #80h                 ; Set to 80
  169:	  809B	11 E7		ACALL lcd_command
  170:
  171:				; Set entry mode so that cursor moves to the right but display not shifted
  172:	  809D	74 06		MOV A, #06h                 ; Set to 06
  173:	  809F	11 E7		ACALL lcd_command
  174:
  175:				; This sets the initial registers for the length of the display lines.
  176:	  80A1	7B 14		MOV R3, #20
  177:	  80A3	7C 02		MOV R4, #2
  178:
  179:
  180:
  181:
  182:				;ACALL clear_disp ; This is needed otherwise the screen has the character used in the menu
  183:
  184:				;-----------Start of SquareWave Code---------------
  185:		N      0004	HALF_PERIOD EQU 4      ; User defined constant
  186:				    ; Running this value at
  187:				    ; 1 would give a period of 6.510us
  188:				    ; 32 gives a period of 73.80us, which is 36.90us high and low.
  189:				    ; 227 gives a period of 499.0us.
  190:				    ; These values are all wrong. Play around with this to get the proper period.
  191:
  192:	  80A5			ON:
  193:	  80A5	78 04		MOV R0, #HALF_PERIOD    ; Move the constant into the register
  194:	  80A7	D2 90		SETB P1.0               ; Set the pin to high
  195:	  80A9	00		NOP                     ; Delay because of JMP at the end
  196:	  80AA	00		NOP                     ; JMP is two cycles, so this is the second NOP here.
  197:
  198:	  80AB			DELAY:
  199:	  80AB	D8 FE		DJNZ R0,DELAY           ; Loop and decrement the register, which is acting as a counter
  200:
  201:	  80AD			OFF:
  202:	  80AD	78 04		MOV R0, #HALF_PERIOD    ; Move the constant back into the register, since R0 equals 0 at this point
  203:	  80AF	C2 90		CLR P1.0                ; Set the bit low
  204:
  205:	  80B1			DELAY2:
  206:	  80B1	D8 FE		DJNZ R0,DELAY2          ; Loop and decrement the register.

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  207:
  208:	  80B3	80 F0		SJMP ON                 ; Jump back to the start of the program
  209:				; This is an infinite loop, nothing will run beyond this point in the code.
  210:				;-------End of SquareWave Code----------
  211:
  212:				;-------Start of LCD Program--------
  213:				; Description: Takes user input and prints it to LCD screen
  214:				; Variables: Uses A
  215:				;   Input: None
  216:				;   Output: Output on the LCD display
  217:
  218:	  80B5			LCD_Subroutine:
  219:	  80B5	11 C0		ACALL user_input
  220:	  80B7	75 8D FA	MOV TH1, #250               ; Timer high. Set the timer to a
  221:	  80BA	75 8B 00	MOV TL1, #00h
  222:	  80BD	22		RET
  223:	  80BE	21 58		AJMP theend                 ; Never reached, but will exit the program. (debugging)
  224:
  225:				;--------End of LCD Program----------
  226:
  227:
  228:
  229:
  230:
  231:				;-----------Subroutines------------
  232:
  233:				;-----Check X-Y Position-----
  234:				; So for this I think I'm just going to have a register that counts up from 1 to 20
  235:				; Then when it reaches the max it switches the values to either #80h or #0C0h
  236:				; depending on if we want the first or the second line. This will use two registers
  237:				; It uses registers r3 and r4, which means these registers can not be used by anything else
  238:				; otherwise the count is disrupted. Could also store in b.
  239:
  240:				; This will return outside the same value put into the accumulator as the user typed
  241:	  80C0			user_input:
  242:				  ;LCALL cin
  243:	  80C0	C2 99		  CLR TI
  244:	  80C2	C2 98		  CLR RI
  245:	  80C4	E5 99		  MOV A, SBUF
  246:	  80C6	11 FA		  ACALL busy_check
  247:	  80C8	90 FE 02	  MOV DPTR, #lcd_data_wr
  248:	  80CB	F0		  MOVX @DPTR, A
  249:	  80CC	C4		  SWAP A
  250:	  80CD	F0		  MOVX @DPTR, A
  251:	  80CE	C4		  SWAP A ; This second swap here is so that the ACC value is the right way around again
  252:	  80CF	C0 E0		  PUSH ACC
  253:	  80D1	11 D6		  ACALL check_cursor_position
  254:	  80D3	D0 E0		  POP ACC
  255:	  80D5	22		RET
  256:
  257:	  80D6			check_cursor_position:
  258:	  80D6	DB 0E		  DJNZ R3, x_good
  259:	  80D8	7B 14		  MOV R3, #20   ; 20 characters on a line
  260:
  261:	  80DA	74 C0		  MOV A, #0C0h                 ; Set to second line
  262:	  80DC	11 E7		  ACALL lcd_command

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  263:
  264:	  80DE	DC 06		  DJNZ R4, y_good
  265:	  80E0	7C 02		  MOV R4, #2    ; 2 lines of characters
  266:
  267:	  80E2	74 80		  MOV A, #80h                 ; Set to first line
  268:	  80E4	11 E7		  ACALL lcd_command
  269:
  270:	  80E6			  x_good:
  271:	  80E6			  y_good:
  272:	  80E6	22		RET
  273:
  274:
  275:				;-----LCD Command-----
  276:				; Description: This is the 4 bit action the performs a write to the command
  277:				;   register. Saves space for repetition.
  278:				; Variables: Uses A and DPTR
  279:				;   Input: The value of A needs to be set before calling this subroutine
  280:				;   Output: Puts the command given in A to the command write
  281:	  80E7			lcd_command:
  282:	  80E7	11 FA		  ACALL busy_check          ; Checks if busy
  283:	  80E9	90 FE 00	  MOV DPTR, #lcd_command_wr ; Moves to command_wr
  284:	  80EC	F0		  MOVX @DPTR, A             ; First four bits (high bits 7-4)
  285:	  80ED	C4		  SWAP A                    ; Swap
  286:	  80EE	F0		  MOVX @DPTR, A             ; Second four bits (low bits 3-0)
  287:	  80EF	22		RET
  288:
  289:				;-----Clear Display-----
  290:				; Description: A specific command that sets A to the appropriate value for clearing
  291:				;   the display.
  292:				; Variables: Uses A
  293:				;   Input: None
  294:				;   Output: Clears the display on the board
  295:	  80F0			clear_disp:
  296:	  80F0	74 01		  MOV A, #01h               ; Command for clear
  297:	  80F2	11 E7		  ACALL lcd_command         ; Perform action
  298:	  80F4	22		RET
  299:
  300:				;-----Move Cursor Home-----
  301:				; Description: Returns the position of the screen to its original position
  302:				; Variables: Uses A
  303:				;   Input: None
  304:				;   Output: Returns screen position to home
  305:				; Move the cursor to the home position
  306:	  80F5			move_cursor_home:
  307:	  80F5	74 02		  MOV A, #02h               ; Move cursor to home position
  308:	  80F7	11 E7		  ACALL lcd_command
  309:	  80F9	22		RET
  310:
  311:				;-----Busy Check-----
  312:				; Description: Checks the busy flag and only allows the program to continue if
  313:				;   the busy flag is not set.
  314:				; Variables: Uses A
  315:				;   Input: None
  316:				;   Output: Time delay
  317:	  80FA			busy_check:
  318:	  80FA	C0 E0		  PUSH ACC                  ; Store value in A

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  319:	  80FC	90 FE 01	  MOV DPTR, #lcd_status_rd  ; Move to status register
  320:	  80FF			  busy_wait:
  321:	  80FF	E0		    MOVX A, @DPTR           ; First 4 bits
  322:	  8100	30 E7 03	    JNB acc.7, busy_go      ; If the data bit is not set, program is clear to return (busy_go)
  323:	  8103	E0		    MOVX A, @DPTR           ; Second 4 bits. Not read but necessary for completeness
  324:	  8104	80 F9		    SJMP busy_wait          ; Loop while busy flag is set
  325:	  8106			  busy_go:
  326:	  8106	E0		    MOVX A, @DPTR           ; Second 4 bits. Ignored
  327:	  8107	D0 E0		    POP ACC                 ; Return value in A
  328:	  8109	22		RET
  329:
  330:				;---------Delay Timers---------
  331:				; Description:The timers all function the same, they just have a different duration.
  332:				;   For every full decrement of the first register, the second (or third) register
  333:				;   will only decrement once. Since the DJNZ takes two clock cycles, the total number
  334:				;   of clock cycles taken by a timer can be found by 2*R0*R1, with each clock
  335:				;   cycle being roughly 0.5us
  336:				; Variables: Makes use of R0, R1 and R2
  337:				;   Inputs: None
  338:				;   Outputs: Time delay
  339:
  340:				; A timer used for the initialization phase
  341:	  810A			init_delay_sequence:
  342:				  ; Wait for 4.3ms
  343:	  810A	78 2D		  MOV R0, #45               ; Divided by 2
  344:	  810C	79 5A		  MOV R1, #90
  345:	  810E			  init_delay:               ; Set for a 4.3ms delay
  346:	  810E	D8 FE		    DJNZ R0, init_delay
  347:	  8110	78 2D		    MOV R0, #45
  348:	  8112	D9 FA		    DJNZ R1, init_delay
  349:	  8114	22		RET
  350:
  351:				; A timer for the blinking left, right portion
  352:	  8115			timer_delay:
  353:				  ; Wait for 137ms
  354:	  8115	78 79		  MOV R0, #121              ; Divided by 2
  355:	  8117	79 3A		  MOV R1, #58
  356:	  8119	7A 12		  MOV R2, #18
  357:	  811B			  delay_timer:              ; Set for a 137ms delay
  358:	  811B	D8 FE		    DJNZ R0, delay_timer
  359:	  811D	78 79		    MOV R0, #121
  360:	  811F	D9 FA		    DJNZ R1, delay_timer
  361:	  8121	79 3A		    MOV R1, #58
  362:	  8123	DA F6		    DJNZ R2, delay_timer
  363:	  8125	22		RET
  364:
  365:				; A timer for holding in the centre
  366:	  8126			timer_delay2:
  367:				  ; Wait for 3.4s
  368:	  8126	78 58		  MOV R0, #88               ; Divided by 2
  369:	  8128	79 B2		  MOV R1, #178
  370:	  812A	7A C8		  MOV R2, #200
  371:	  812C			  delay_timer2:             ; Set for a 3.4s delay
  372:	  812C	D8 FE		    DJNZ R0, delay_timer2
  373:	  812E	78 58		    MOV R0, #88
  374:	  8130	D9 FA		    DJNZ R1, delay_timer2

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  375:	  8132	79 B2		    MOV R1, #178
  376:	  8134	DA F6		    DJNZ R2, delay_timer2
  377:	  8136	22		RET
  378:
  379:				; A timer that changes how quickly the names shift across the screen.
  380:	  8137			ticker_tape:
  381:				  ; Wait for however long/short you want that looks good
  382:	  8137	78 4B		  MOV R0, #75
  383:	  8139	79 4B		  MOV R1, #75
  384:	  813B	7A 4B		  MOV R2, #75
  385:	  813D			  delay_ticker:
  386:	  813D	D8 FE		    DJNZ R0, delay_ticker
  387:	  813F	78 4B		    MOV R0, #75
  388:	  8141	D9 FA		    DJNZ R1, delay_ticker
  389:	  8143	79 4B		    MOV R1, #75
  390:	  8145	DA F6		    DJNZ R2, delay_ticker
  391:	  8147	22		RET
  392:
  393:				;--------Useless Stuff for Later Reference----------
  394:				; Print the letter C
  395:	  8148	11 FA		ACALL busy_check
  396:	  814A	90 FE 02	MOV DPTR, #lcd_data_wr
  397:	  814D	74 43		MOV A, #43h ; Print the letter
  398:	  814F	F0		MOVX @DPTR, A
  399:	  8150	C4		SWAP A
  400:	  8151	F0		MOVX @DPTR, A
  401:
  402:				; For some reason this needed to be outside of the subroutine call. idk why
  403:				; This works, but not sure where to put it since if it's within a subroutine
  404:				; or ISR it does not function as intended.
  405:	  8152	B4 1B 03	CJNE A, #1Bh, escape_not_pressed
  406:	  8155	02 81 58	LJMP theend
  407:	  8158			escape_not_pressed:
  408:
  409:	  8158			theend:
  410:				END                         ; End of program.





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
BUSY_CHECK			  CODE	    80FA	 317
BUSY_GO				  CODE	    8106	 325
BUSY_WAIT			  CODE	    80FF	 320
CHECK_CURSOR_POSITION		  CODE	    80D6	 257
CIN				  NUMBER    0032	  64
CLEAR_DISP			  CODE	    80F0	 295
COUT				  NUMBER    0030	  63
CY				  BIT	      D7
DELAY				  CODE	    80AB	 198
DELAY2				  CODE	    80B1	 205
DELAY_TICKER			  CODE	    813D	 385
DELAY_TIMER			  CODE	    811B	 357
DELAY_TIMER2			  CODE	    812C	 371
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ESC				  NUMBER    003E	  65
ESCAPE_NOT_PRESSED		  CODE	    8158	 407
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTERN_0			  NUMBER    2003	  29
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
HALF_PERIOD			  NUMBER    0004	 185
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INITIALIZE_LCD			  CODE	    8063	 105
INIT_DELAY			  CODE	    810E	 345
INIT_DELAY_SEQUENCE		  CODE	    810A	 341
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LCD_COMMAND			  CODE	    80E7	 281
LCD_COMMAND_WR			  NUMBER    FE00	  57
LCD_DATA_RD			  NUMBER    FE03	  60
LCD_DATA_WR			  NUMBER    FE02	  59
LCD_STATUS_RD			  NUMBER    FE01	  58
LCD_SUBROUTINE			  CODE	    80B5	 218

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LOCAT				  NUMBER    8000	  14
MOVE_CURSOR_HOME		  CODE	    80F5	 306
OFF				  CODE	    80AD	 201
ON				  CODE	    80A5	 192
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PORT_A				  NUMBER    F800	  52
PORT_ABC_PGM			  NUMBER    F803	  54
PORT_B				  NUMBER    F801	  53
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RI_TI				  NUMBER    2023	  44
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
THEEND				  CODE	    8158	 409
TI				  BIT	      99
TICKER_TAPE			  CODE	    8137	 380
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TIMER_1				  NUMBER    201B	  39
TIMER_DELAY			  CODE	    8115	 352
TIMER_DELAY2			  CODE	    8126	 366
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TR1				  BIT	      8E
TXD				  BIT	      B1
USER_INPUT			  CODE	    80C0	 241
WR				  BIT	      B6
X_GOOD				  CODE	    80E6	 270
Y_GOOD				  CODE	    80E6	 271
